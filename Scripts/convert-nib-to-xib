#!/usr/bin/env python3

# A small tool to convert a legacy NeXTStep NIB bundle to a modern Interface
# Builder XIB that recent versions of Xcode (e.g. 15.4) can read. Note that
# the tool cannot handle many of the newer versions of the NIB file format
# and is expressly built to handle the reverse engineered WorldWideWeb.nib

from dataclasses import dataclass, field
from pathlib import Path
from uuid import uuid4
from typing import Any, Iterable, Optional, Self

import argparse
import typedstream
import xml.etree.ElementTree as ET

# TODO: Reverse-engineer the parameters of some common classes (e.g. View)
# TODO: Use a better order for "expanding" referenced objects (e.g. breadth-first)
# TODO: Generate a "modern" XIB and perhaps only keep the old one around as a reference

@dataclass
class Options:
    convert_class_names: bool

@dataclass
class State:
    options: Options
    visited_objects: set[typedstream.GenericArchivedObject] = field(default_factory=set)

def convert_class_name(c: str, state: State) -> str:
    if not state.options.convert_class_names or c.startswith('IB'):
        return c
    else:
        return f"NS{c.removeprefix('NX').removesuffix('Template')}"

def convert_value(value: Any, state: State) -> ET.Element:
    if value is None:
        return ET.Element('nil')
    elif isinstance(value, int):
        element = ET.Element('int')
        element.text = str(value)
        return element
    elif isinstance(value, float):
        element = ET.Element('float')
        element.text = str(value)
        return element
    elif isinstance(value, bytes):
        element = ET.Element('string')
        element.text = value.decode()
        return element
    elif isinstance(value, typedstream.Class):
        element = ET.Element(
            'class',
            attrib={
                'name': convert_class_name(value.name.decode(), state=state),
                **({'superclass': convert_class_name(value.superclass.name.decode(), state=state)} if value.superclass else {}),
            },
        )
        return element
    elif isinstance(value, typedstream.GenericArchivedObject):
        if value in state.visited_objects:
            return ET.Element(
                'reference',
                attrib={
                    'class': convert_class_name(value.clazz.name.decode(), state=state),
                    'ref': str(id(value)),
                },
            )
        state.visited_objects.add(value)

        return convert_object(value, name='obj', state=state)
    elif isinstance(value, typedstream.types.nextstep.List):
        element = ET.Element('list')
        for item in value.elements:
            element.append(convert_value(item, state=state))
        return element
    else:
        return ET.Element('unknown', attrib={'name': str(type(value))})

def convert_group(group: typedstream.TypedGroup, state: State) -> Iterable[ET.Element]:
    for value in group.values:
        yield convert_value(value, state=state)

def convert_object(obj: typedstream.GenericArchivedObject, name: str, state: State) -> ET.Element:
    element = ET.Element(
        name,
        attrib={
            'class': convert_class_name(obj.clazz.name.decode(), state=state),
            'id': str(id(obj))
        } if name == 'obj' else {},
    )

    for group in obj.contents:
        group_element = ET.SubElement(element, 'group')
        for value in convert_group(group, state=state):
            group_element.append(value)

    return element

class XIBNode:
    def __init__(self, element: ET.Element, id: Optional[str]=None):
        self.element = element
        self.id = id

        self._connections: Optional[Self] = None
        self._items: Optional[Self] = None

    def add_object(self, class_or_tag_name: str, id: Optional[str]=None, **kwargs) -> Self:
        '''Adds an object under this node.'''

        assert len(class_or_tag_name) > 0
        is_custom = class_or_tag_name[0].isupper()

        id = id or str(uuid4())
        child = ET.Element('customObject' if is_custom else class_or_tag_name, attrib={
            'id': id,
            **kwargs,
            **({'customClass': class_or_tag_name} if is_custom else {}),
        })
        self.element.append(child)

        return XIBNode(child, id)
    
    def add(self, tag_name: str, **kwargs) -> Self:
        '''Adds a custom node under this node.'''

        child = ET.Element(tag_name, attrib={**kwargs})
        self.element.append(child)

        return XIBNode(child)
    
    @property
    def connections(self) -> Self:
        if self._connections is None:
            self._connections = XIBNode(ET.Element('connections'))
            self.element.append(self._connections.element)
        return self._connections

    @property
    def items(self) -> Self:
        if self._items is None:
            self._items = XIBNode(ET.Element('items'))
            self.element.append(self._items.element)
        return self._items

    def connect_outlet(self, property: str, destination: str | Self):
        '''Adds an outlet to the given destination.'''

        return self.connections.add_object('outlet',
            property=property,
            destination=destination if isinstance(destination, str) else destination.id,
        )
    
    def connect_action(self, selector: str, target: str | Self):
        '''Adds an action invoking the given target with the given selector.'''

        return self.connections.add_object('action',
            selector=selector,
            target=target if isinstance(target, str) else target.id,
        )
    
class XIB:
    def __init__(self):
        self.root = ET.Element('document', attrib={
            'type': 'com.apple.InterfaceBuilder3.Cocoa.XIB',
            'version': '3.0',
            'toolsVersion': '32700.99.1234',
            'targetRuntime': 'MacOSX.Cocoa',
            'propertyAccessControl': 'none',
            'useAutolayout': 'NO',
            'customObjectInstantiationMethod': 'direct',
        })

        self.tree = ET.ElementTree(self.root)
    
        self.dependencies = self.add_node('dependencies')
        self.dependencies.add('plugIn', identifier='com.apple.InterfaceBuilder.CocoaPlugin', version='22690')
        self.dependencies.add('capability', name='documents saved in the Xcode 8 format', minToolsVersion='8.0')

        self.objects = self.add_node('objects')

        # Add default objects
        files_owner = self.objects.add_object('NSApplication', id='-2', userLabel="File's Owner")
        first_responder = self.objects.add_object('FirstResponder', id='-1', userLabel='First Responder')
        self.objects.add_object('NSObject', id='-3', userLabel='Application')
        self.objects.add_object('NSFontManager')

        app_delegate = self.objects.add_object('AppDelegate')
        files_owner.connect_outlet('delegate', app_delegate)

        # Add main menu
        main_menu = self.objects.add_object('menu', systemMenu='main')
        main_menu.add('point', key='canvasLocation', x='200', y='121')

        app_item = main_menu.items.add_object('menuItem', title='WorldWideWeb')
        app_item.add('modifierMask', key='keyEquivalentModifierMask')
        app_menu = app_item.add_object('menu', key='submenu', title='WorldWideWeb')
        app_menu.items.add_object('menuItem', title='About WorldWideWeb')
        app_menu.items.add_object('menuItem', isSeparatorItem='YES')
        quit_item = app_menu.items.add_object('menuItem', title='Quit WorldWideWeb', keyEquivalent='q')
        quit_item.connect_action('terminate:', first_responder)

        file_item = main_menu.items.add_object('menuItem', title='File')
        file_item.add('modifierMask', key='keyEquivalentModifierMask')
        file_item.add_object('menu', key='submenu', title='File')

        # Add window
        window = self.objects.add_object('window', title='WorldWideWeb')
        window.add('point', key='canvasLocation', x='200', y='400')
        window.add('windowStyleMask', key='styleMask', titled='YES', closable='YES', miniaturizable='YES', resizable='YES')
        window.add('rect', key='contentRect', x='0', y='0', width='480', height='360')
        window.add_object('view', key='contentView')
        window.connect_outlet('delegate', app_delegate)
        app_delegate.connect_outlet('window', window)

    def add_node(self, name: str) -> XIBNode:
        '''Creates a new node under the document root.'''

        element = ET.Element(name)
        self.root.append(element)
        return XIBNode(element)

    def indent(self, indent: str=' ' * 4):
        '''Indents the tree with the given indent (4 spaces by default).'''

        ET.indent(self.tree, space=indent)
    
    def write(self, path: Path):
        '''Writes the XIB to the given path.'''

        self.tree.write(path, encoding='utf-8', xml_declaration=True)

def convert_root(obj: typedstream.GenericArchivedObject, options: Options) -> XIB:
    # TODO
    # root.append(convert_object(obj, name='data', state=State(options=options)))

    xib = XIB()
    return xib

def main():
    parser = argparse.ArgumentParser(description='Converts a legacy NeXTStep NIB to XIB.')
    parser.add_argument('-o', '--output', required=True, type=Path, help='The path to the output XIB.')
    parser.add_argument('--convert-class-names', action=argparse.BooleanOptionalAction, default=True, help="Convert class names to Cocoa's NS prefix.")
    parser.add_argument('input', type=Path, help='The path to the input NIB.')

    args = parser.parse_args()
    options = Options(
        convert_class_names=args.convert_class_names,
    )

    nib = typedstream.unarchive_from_file(args.input / 'data.nib')
    xib = convert_root(nib, options=options)

    xib.indent()
    xib.write(args.output)

if __name__ == '__main__':
    main()
