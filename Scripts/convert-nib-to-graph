#!/usr/bin/env python3

# A small tool to convert a legacy NeXTStep NIB bundle to a graph visualization.
# Note that the tool cannot handle many of the newer versions of the NIB file
# format and is expressly built to handle the reverse engineered
# WorldWideWeb.nib

from dataclasses import dataclass, field
from pathlib import Path
from typing import Any

import argparse
import subprocess
import typedstream

# TODO: Reverse-engineer the parameters of some common classes (e.g. View)
# TODO: Use a better order for "expanding" referenced objects (e.g. breadth-first)

@dataclass
class Options:
    skip_groups: bool

@dataclass
class State:
    options: Options
    visited: set[int] = field(default_factory=set)
    edges: list[tuple[str, str]] = field(default_factory=list)

def node_from(value: Any):
    if isinstance(value, typedstream.GenericArchivedObject):
        return f'{value.clazz.name.decode()}@{id(value)}'
    elif isinstance(value, typedstream.TypedGroup):
        return f'[{id(value)}]'
    elif isinstance(value, bytes):
        return value.decode()
    elif isinstance(value, typedstream.types.nextstep.List):
        return f'List@{id(value)}'
    elif isinstance(value, typedstream.archiving.Array):
        return f'Array@{id(value)}'
    else:
        return str(value)

def traverse_object(obj: typedstream.GenericArchivedObject, state: State):
    state.visited.add(id(obj))
    for group in obj.contents:
        if not state.options.skip_groups:
            state.edges.append((node_from(obj), node_from(group)))
        for value in group.values:
            if isinstance(value, typedstream.GenericArchivedObject):
                if state.options.skip_groups:
                    state.edges.append((node_from(obj), node_from(value)))
                else:
                    state.edges.append((node_from(group), node_from(value)))
                if id(value) not in state.visited:
                    traverse_object(value, state=state)

def traverse_root(obj: typedstream.GenericArchivedObject, state: State):
    traverse_object(obj, state=state)

def main():
    parser = argparse.ArgumentParser(description='Converts a legacy NeXTStep NIB to a graph visualization.')
    parser.add_argument('--skip-groups', action='store_true', help='Whether to skip any groups.')
    parser.add_argument('-l', '--layout', default='sfdp', help='The GraphViz layout algorithm (e.g. dot, fdp, sfdp).')
    parser.add_argument('-o', '--output', required=True, type=Path, help='The path to the output file (e.g. a DOT or PDF file).')
    parser.add_argument('input', type=Path, help='The path to the input NIB.')

    args = parser.parse_args()
    options = Options(
        skip_groups=args.skip_groups,
    )
    state = State(options=options)

    nib = typedstream.unarchive_from_file(args.input / 'data.nib')
    traverse_root(nib, state=state)

    dot = '\n'.join([
        'digraph {',
        *(f'"{src}" -> "{dest}";' for src, dest in state.edges),
        '}',
    ])

    match args.output.suffix:
        case '.dot':
            with open(args.output, 'w') as f:
                f.write(dot)
        case suffix:
            format = suffix[1:]
            subprocess.run(
                [args.layout, f'-T{format}', '-Goverlap=scale', '-o', str(args.output)],
                input=dot.encode(),
                check=True,
            )

if __name__ == '__main__':
    main()
